import * as React from "react";
import { getAuth, onAuthStateChanged } from "firebase/auth";
import { useState, useEffect } from "react";
import "./Cart.css";
import { useFormik } from "formik";
import * as Yup from "yup";
import { db } from "./firebase";
import { collection, addDoc, setDoc, doc, getDocs } from "firebase/firestore";
import Navigation from "./Navigation";
import { BsClock, BsX } from "react-icons/bs";
import WhenSubmit from "./WhenSumbit";
import EmptyCart from "./EmptyCart";
import { query, where } from "firebase/firestore";
import { FormatLineSpacing } from "@mui/icons-material";

export default function Cart() {
  const [products, setProducts] = useState([]);
  const [information, setInformation] = useState([]);
  const [quantity, setQuantity] = useState(0);
  const [total, setTotal] = useState(0);
  const [codePrice, setCodePrice] = useState(0);
  const [productsPrice, setProductsPrice] = useState(0);
  const [emptyCart, setEmptyCart] = useState(false);
  const [firstLetter, SetFirstLetter] = useState("");
  const [email, setEmail] = useState("");
  const [userId, setUserId] = useState("");
  const [saveInformation, setSaveInformation] = useState(false);
  const [submit, setSubmit] = useState(false);
  const [deliveryCost, setDeliveryCost] = useState(3.99);
  const [checkedCash, setCheckedCash] = useState(false);
  const [checkedCard, setCheckedCard] = useState(false);
  const [delivery, setDelivery] = useState(false);
  const [takeaway, setTakeaway] = useState(false);
  const [sameShipping, setShameShipping] = useState(true);
  const [discount, setDiscount] = useState(0);
  const [date, setDate] = useState("");
  const [deliveryClass, setDeliveryClass] = useState("");
  const [takeawayClass, setTakeawayClass] = useState("");
  const [TakeawayCost, setTakeawayCost] = useState(0);
  const [orderNo, setOrdeNo] = useState("");
  const [logIn, setLogIn] = useState(false);
  const [deleteP, setDeleteP] = useState(false);
  const [codes, setCodes] = useState([]);
  const [codeActive, setCodeActive] = useState(false);
  const [codeDontExist, setCodeDontExist] = useState(false);

  useEffect(() => {
    const auth = getAuth();
    onAuthStateChanged(auth, (user) => {
      if (user) {
        setLogIn(true);
        // User is signed in, see docs for a list of available properties
        // https://firebase.google.com/docs/reference/js/firebase.User
        const uid = user.uid;
        console.log(user.email);
        setEmail(user.email);
        setUserId(uid);
        SetFirstLetter(user.email.charAt(0).toUpperCase());
      } else {
        // User is signed out
        // ...
      }
    });
  }, []);

  const SignupSchema = Yup.object().shape({
    fname: Yup.string()
      .min(1, "Too short")
      .required("Please enter your First Name"),
    lname: Yup.string()
      .min(1, "Too short")
      .required("Please enter your Last Name"),
    address: Yup.string()
      .min(1, "Too short")
      .required("Please enter your address"),
    address2: Yup.string().min(1, "Too short"),
    country: Yup.string().required("Please select a country"),
    zip: Yup.string()
      .required("Please enter your Zip Code")
      .matches(/^[0-9]{5}$/, "Invalid zip code"),
    delivery: Yup.string().required(),
    fnameShipping: "",
    lnameShipping: "",
    addressShipping: "",
    address2Shipping: "",
    countryShipping: "",
    zipShipping: "",
  });

  const formik = useFormik({
    initialValues: {
      fname: "",
      lname: "",
      address: "",
      address2: "",
      country: "",
      zip: "",
      code: "",
      shippingOption: "",
      fnameShipping: "",
      lnameShipping: "",
      addressShipping: "",
      address2Shipping: "",
      countryShipping: "",
      zipShipping: "",
      paymentMethodCash: false,
      paymentMethodCard: false,
      delivery: "",
    },
    validationSchema: SignupSchema,

    onSubmit: (values) => {
      if (delivery) {
        setTotal((deliveryCost + total).toFixed(2));
      }

      addInformationToFirebase(values);

      addOrdersToFirebase(values);
      setSubmit(true);
      localStorage.clear();
      setQuantity(0);
      alert(JSON.stringify(values, null, 2));
    },
  });

  useEffect(() => {
    //console.log(formik);
    console.log(formik.errors);
  }, [formik]);

  useEffect(() => {
    //console.log(formik);
    console.log(total);
  }, [total]);

  let savedCart = JSON.parse(localStorage.getItem("cart"));
  useEffect(() => {
    if (savedCart) {
      console.log(savedCart);
      if (savedCart.length === 0) {
        setEmptyCart(true);
      }
      let total1 = 0;
      savedCart.map((product) => {
        total1 = total1 + product.price * product.howmany;
      });
      setProductsPrice(total1);
      let discount = parseFloat((total1 * codePrice).toFixed(2));
      setDiscount(parseFloat((total1 * codePrice).toFixed(2)));
      setTotal(parseFloat((total1 - discount).toFixed(2)));
      setDate(new Date().toLocaleDateString());
      setProducts(savedCart);
    }
  }, [codePrice]);

  useEffect(() => {
    if (quantity == 0) {
      setEmptyCart(true);
    } else {
      setEmptyCart(false);
    }
  }, [quantity]);

  useEffect(() => {
    let quantity = 0;
    let total1 = 0;
    if (savedCart) {
      savedCart.map((product) => {
        quantity += product.howmany;
        total1 = total1 + product.price * product.howmany;
      });

      setProductsPrice(total1);
      setTotal(parseFloat((total1 - total1 * codePrice).toFixed(2)));
      setQuantity(quantity);
    }
  }, [products]);

  async function getCodes(code) {
    const q = query(collection(db, "codes"), where("name", "==", code));
    const querySnapshot = await getDocs(q);
    if (querySnapshot.empty) {
      console.log("No documents match the query");
      setCodeDontExist(true);
    } else {
      //console.log(querySnapshot);
      const newcodes = [...codes];
      querySnapshot.forEach((doc) => {
        //console.log(doc.id, " => ", doc.data());
        console.log(doc.data());
        newcodes.push(doc.data());
        setCodePrice(doc.data().price);
        setCodes(newcodes);
        setCodeActive(true);
      });
    }
  }

  function redeemCode(e) {
    e.preventDefault();

    //console.log(formik.values.code);
    getCodes(formik.values.code);
    formik.values.code = "";
  }

  async function addInformationToFirebase(values) {
    console.log("addInformation");
    try {
      await setDoc(doc(db, "users", userId), {
        fname: values.fname,
        lname: values.lname,
        address: values.address,
        address2: values.address2,
        country: values.country,
        zip: values.zip,
      });
      console.log("added");
      //console.log("Document written with ID: ", docRef.id);
    } catch (e) {
      console.error("Error adding document: ", e);
    }
  }
  async function addOrdersToFirebase(values) {
    console.log("addOrders");
    try {
      const docRef = await addDoc(collection(db, "orders"), {
        total: total,
        products: products,
        delivery: delivery,
        takeaway: takeaway,
        cash: checkedCash,
        //date: date,
        userId: userId,
        quantity: quantity,
      });
      //console.log("Document written with ID: ", docRef.id);
      //console.log(submit);
    } catch (e) {
      console.error("Error adding document: ", e);
    }
  }

  function chooseDelivery() {
    formik.setFieldValue("delivery", "delivery");
    setDelivery(true);
    setTakeaway(false);
    setDeliveryClass("shippingClass");
    setTakeawayClass("");
  }

  function chooseTakeaway() {
    formik.setFieldValue("delivery", "takeaway");
    setDelivery(false);
    setTakeaway(true);
    setTakeawayClass("shippingClass");
    setDeliveryClass("");
  }

  function handlePayment(id) {
    //console.log(id);
    if (id == "cash") {
      console.log(id);
      setCheckedCash(true);
      setCheckedCard(false);
    } else if (id == "card") {
      setCheckedCash(false);
      setCheckedCard(true);
    }
  }
  function handleSameShipping(event) {
    setShameShipping(event.target.checked);
  }

  function deleteProduct(product1) {
    setDeleteP(true);
    console.log("Delete product");
    let productsCopy = [...products];
    console.log(product1);
    const index = productsCopy.findIndex(
      (product) => product.key === product1.key
    );
    console.log(productsCopy);
    if (index !== -1) {
      productsCopy.splice(index, 1);
      //console.log("find it");
    }
    console.log(productsCopy);
    if (productsCopy.length === 0) {
      setEmptyCart(true);
    }
    setProducts(productsCopy);
    console.log(deleteP);
    localStorage.setItem("cart", JSON.stringify(productsCopy));
  }

  return (
    <div>
      <Navigation
        firstLetter={firstLetter}
        quantity={quantity}
        logIn={logIn}
        submit={submit}
      />
      {!emptyCart ? (
        <div className="container">
          {!submit && (
            <main>
              <div className="py-5 text-center">
                <h2>Checkout form</h2>
                <p className="lead">Fill in the information to Checkout</p>
              </div>
              <div className="row g-5">
                <div class="col-md-5 col-lg-4 order-md-last">
                  <h4 class="d-flex justify-content-between align-items-center mb-3">
                    <span class="text" style={{ color: "#ff9800" }}>
                      Your cart
                    </span>
                    <span
                      class="badge rounded-pill"
                      style={{ backgroundColor: "#ff9800" }}
                    >
                      {quantity}
                    </span>
                  </h4>
                  <ul class="list-group mb-3">
                    {products.map((product) => (
                      <li class="list-group-item d-flex justify-content-between lh-sm">
                        <div>
                          <h6 class="my-0">{product.name}</h6>
                          <small class="text-muted">{product.brief}</small>
                        </div>
                        <div class="d-flex flex-column">
                          <small class="text-muted">x{product.howmany}</small>
                          <span class="text-muted">${product.price}</span>
                        </div>
                        <div>
                          <button className="deleteButton">
                            <BsX onClick={() => deleteProduct(product)} />
                          </button>
                        </div>
                      </li>
                    ))}

                    {codes.map((code) => (
                      <li class="list-group-item d-flex justify-content-between bg-light">
                        <div class="text-success">
                          <h6 class="my-0">Promo code</h6>
                          <small>{code.name}</small>
                        </div>
                        <span class="text-success">−${discount}</span>
                      </li>
                    ))}
                    {delivery && (
                      <li class="list-group-item d-flex justify-content-between">
                        <span>Delivery</span>
                        <p class="mb-0">${deliveryCost}</p>
                      </li>
                    )}
                    {takeaway && (
                      <li class="list-group-item d-flex justify-content-between">
                        <span>Takeaway</span>
                        <p class="mb-0">FREE</p>
                      </li>
                    )}
                    {!delivery && !takeaway ? (
                      <li class="list-group-item d-flex justify-content-between">
                        <span>Shipping</span>
                        <p class="mb-0">-</p>
                      </li>
                    ) : (
                      ""
                    )}

                    <li class="list-group-item d-flex justify-content-between">
                      <span>Total (USD)</span>
                      <strong>
                        ${delivery ? (total + deliveryCost).toFixed(2) : total}
                      </strong>
                    </li>
                  </ul>
                  <form class="card p-2">
                    <div class="input-group">
                      <input
                        type="text"
                        class="form-control"
                        placeholder="Promo code"
                        onChange={formik.handleChange}
                        value={formik.values.code}
                        name="code"
                        disabled={codeActive}
                      />
                      <button class="btn btn-secondary" onClick={redeemCode}>
                        Redeem
                      </button>
                      {codeDontExist && (
                        <div class="alert alert-danger" role="alert">
                          The code you entered doesn't exist.
                        </div>
                      )}
                    </div>
                  </form>
                </div>
                <div className="col-md-7 col-lg-8">
                  <h4 className="mb-3">Billing address</h4>
                  <form
                    onSubmit={formik.handleSubmit}
                    className="needs-validation"
                  >
                    <div className="row g-3">
                      <div className="col-sm-6">
                        <label for="firstName" className="form-label">
                          First name
                        </label>
                        <input
                          type="text"
                          name="fname"
                          id="fname"
                          required
                          placeholder=""
                          onChange={formik.handleChange}
                          value={formik.values.fname}
                          className={`form-control ${
                            formik.errors.fname && "is-invalid"
                          }`}
                        />
                        <div className="invalid-feedback">
                          {formik.errors.fname}
                        </div>
                      </div>
                      <div className="col-sm-6">
                        <label for="lastName" className="form-label">
                          Last name
                        </label>
                        <input
                          name="lname"
                          type="text"
                          className={`form-control ${
                            formik.errors.lname && "is-invalid"
                          }`}
                          id="lname"
                          placeholder=""
                          required
                          onChange={formik.handleChange}
                          value={formik.values.lname}
                          error={formik.errors.lname ? true : false}
                        />
                        <div className="invalid-feedback">
                          {formik.errors.lname}
                        </div>
                      </div>

                      <div className="col-12">
                        <label for="address" className="form-label">
                          Address
                        </label>
                        <input
                          name="address"
                          type="text"
                          className={`form-control ${
                            formik.errors.address && "is-invalid"
                          }`}
                          id="address"
                          placeholder="1234 Main St"
                          required
                          onChange={formik.handleChange}
                          value={formik.values.address}
                          error={formik.errors.address ? true : false}
                        />
                        <div className="invalid-feedback">
                          {formik.errors.address}
                        </div>
                      </div>

                      <div className="col-12">
                        <label for="address2" className="form-label">
                          Address 2{" "}
                          <span className="text-muted">(Optional)</span>
                        </label>
                        <input
                          name="address2"
                          type="text"
                          className={`form-control ${
                            formik.errors.address2 && "is-invalid"
                          }`}
                          id="address2"
                          placeholder="Apartment or suite"
                          onChange={formik.handleChange}
                          value={formik.values.address2}
                          error={formik.errors.address2 ? true : false}
                        />
                      </div>
                      <div className="col-md-5">
                        <label for="country" className="form-label">
                          Country
                        </label>
                        <select
                          name="country"
                          className={`form-select ${
                            formik.errors.country && "is-invalid"
                          }`}
                          onChange={formik.handleChange}
                          value={formik.values.country}
                        >
                          <option>Choose a country</option>
                          <option value="United States">United States</option>
                          <option value="Greece">Greece</option>
                          <option value="Italy">Italy</option>
                        </select>
                        <div className="invalid-feedback">
                          {formik.errors.country}
                        </div>
                      </div>

                      <div className="col-md-3">
                        <label for="zip" className="form-label">
                          Zip
                        </label>
                        <input
                          type="text"
                          className={`form-control ${
                            formik.errors.zip && "is-invalid"
                          }`}
                          id="zip"
                          name="zip"
                          placeholder=""
                          required
                          onChange={formik.handleChange}
                          value={formik.values.zip}
                        />
                        <div className="invalid-feedback">
                          Zip code required.
                        </div>
                      </div>
                    </div>
                    <div className="mt-3">
                      <div className="form-check  d-flex align-items-center gap-2  ">
                        <input
                          type="checkbox"
                          className="form-check-input"
                          id="same-address"
                          checked={sameShipping}
                          onChange={handleSameShipping}
                        />
                        <label className="form-check-label" for="same-address">
                          Shipping address is the same as my billing address
                        </label>
                      </div>
                      {!sameShipping && (
                        <div className="row g-3 mt-3">
                          <h4 className="">Shipping address</h4>
                          <div className="col-sm-6">
                            <label for="firstName" className="form-label">
                              First name
                            </label>
                            <input
                              type="text"
                              name="fnameShipping"
                              className={`form-control ${
                                formik.errors.fnameShipping && "is-invalid"
                              }`}
                              id="fnameShipping"
                              required
                              placeholder=""
                              onChange={formik.handleChange}
                              value={formik.values.fnameShipping}
                            />
                            <div className="invalid-feedback">
                              {formik.errors.fnameShipping}
                            </div>
                          </div>
                          <div className="col-sm-6">
                            <label for="lastName" className="form-label">
                              Last name
                            </label>
                            <input
                              name="lnameShipping"
                              type="text"
                              className={`form-control ${
                                formik.errors.lnameShipping && "is-invalid"
                              }`}
                              id="lnameShipping"
                              placeholder=""
                              required
                              onChange={formik.handleChange}
                              value={formik.values.lnameShipping}
                              error={formik.errors.lnameShipping ? true : false}
                            />
                            <div className="invalid-feedback">
                              {formik.errors.lnameShipping}
                            </div>
                          </div>

                          <div className="col-12">
                            <label for="address" className="form-label">
                              Address
                            </label>
                            <input
                              name="addressShipping"
                              type="text"
                              className={`form-control ${
                                formik.errors.addressShipping && "is-invalid"
                              }`}
                              id="addressShipping"
                              placeholder="1234 Main St"
                              required
                              onChange={formik.handleChange}
                              value={formik.values.addressShipping}
                            />
                            <div className="invalid-feedback">
                              {formik.errors.addressShipping}
                            </div>
                          </div>

                          <div className="col-12">
                            <label for="address2" className="form-label">
                              Address 2
                              <span className="text-muted">(Optional)</span>
                            </label>
                            <input
                              name="address2Shipping"
                              type="text"
                              className={`form-control ${
                                formik.errors.address2Shipping && "is-invalid"
                              }`}
                              id="address2Shipping"
                              placeholder="Apartment or suite"
                              onChange={formik.handleChange}
                              value={formik.values.address2Shipping}
                            />
                          </div>
                          <div className="col-md-5">
                            <label for="country" className="form-label">
                              Country
                            </label>
                            <select
                              name="countryShipping"
                              className={`form-select ${
                                formik.errors.countryShipping && "is-invalid"
                              }`}
                              onChange={formik.handleChange}
                              value={formik.values.countryShipping}
                            >
                              <option value="United States">
                                United States
                              </option>
                              <option value="Greece">Greece</option>
                              <option value="Italy">Italy</option>
                            </select>
                            <div className="invalid-feedback">
                              Please select a country.
                            </div>
                          </div>

                          <div className="col-md-3">
                            <label for="zipShipping" className="form-label">
                              Zip
                            </label>
                            <input
                              type="text"
                              className={`form-control ${
                                formik.errors.zipShipping && "is-invalid"
                              }`}
                              id="zipShipping"
                              placeholder=""
                              required
                              onChange={formik.handleChange}
                              value={formik.values.zipShipping}
                            />
                            <div className="invalid-feedback">
                              {formik.errors.zipShipping}
                            </div>
                          </div>
                        </div>
                      )}
                    </div>

                    <hr className="my-4" />
                    <div>
                      <h4 className="mb-3">Shipping</h4>

                      <ul className="list-group mb-3  ">
                        <li
                          className={`list-group-item d-flex justify-content-between lh-sm shipping ${deliveryClass} `}
                          onClick={chooseDelivery}
                        >
                          <div>
                            <h6 className="my-0">Delivery</h6>
                            <small className="text-muted d-flex align-items-center gap-1">
                              <BsClock />
                              20'
                            </small>
                          </div>
                          <div className="d-flex flex-column">
                            <small className="text-muted"></small>
                            <span className="text-muted">${deliveryCost}</span>
                          </div>
                        </li>

                        <li
                          className={`list-group-item d-flex justify-content-between lh-sm shipping ${takeawayClass} `}
                          onClick={chooseTakeaway}
                        >
                          <div>
                            <h6 className="my-0">Takeaway</h6>
                            <small className="text-muted d-flex align-items-center gap-1">
                              <BsClock />
                              10'
                            </small>
                          </div>
                          <div className="d-flex flex-column ">
                            <span className="text-muted align-self-end">
                              FREE
                            </span>
                            <small>
                              <a className="link-info">Pick a store</a>
                            </small>
                          </div>
                        </li>
                      </ul>
                      <div className="invalid-feedback">
                        Valid first name is required.
                      </div>
                    </div>
                    <hr className="my-4" />
                    <div>
                      <h4 className="mb-3">Payment</h4>
                      <div className="my-3">
                        <div className="form-check d-flex align-items-center gap-2">
                          <input
                            id="card"
                            name="paymentMethodCard"
                            value="card"
                            type="checkbox"
                            className={`form-check-input`}
                            r
                            checked={checkedCard}
                            onChange={() => handlePayment("card")}
                          />
                          <label className="form-check-label" for="credit">
                            Credit card
                          </label>
                        </div>

                        <div className="form-check d-flex align-items-center gap-2">
                          <input
                            id="cash"
                            value="cash"
                            name="paymentMethodCash"
                            type="checkbox"
                            className="form-check-input"
                            required
                            checked={checkedCash}
                            onChange={() => handlePayment("cash")}
                          />
                          <label className="form-check-label" for="paypal">
                            Cash on Delivery
                          </label>
                          <div className="invalid-feedback">
                            {formik.errors.paymentMethodCard}
                          </div>
                        </div>
                      </div>
                      {checkedCard && (
                        <div className="row gy-3">
                          <div className="col-md-6">
                            <label for="cc-name" className="form-label">
                              Name on card
                            </label>
                            <input
                              type="text"
                              className="form-control"
                              id="cc-name"
                              placeholder=""
                              required
                            />
                            <small className="text-muted">
                              Full name as displayed on card
                            </small>
                            <div className="invalid-feedback">
                              Name on card is required
                            </div>
                          </div>

                          <div className="col-md-6">
                            <label for="cc-number" className="form-label">
                              Credit card number
                            </label>
                            <input
                              type="text"
                              className="form-control"
                              id="cc-number"
                              placeholder=""
                              required
                            />
                            <div className="invalid-feedback">
                              Credit card number is required
                            </div>
                          </div>

                          <div className="col-md-3">
                            <label for="cc-expiration" className="form-label">
                              Expiration
                            </label>
                            <input
                              type="text"
                              className="form-control"
                              id="cc-expiration"
                              placeholder=""
                              required
                            />
                            <div className="invalid-feedback">
                              Expiration date required
                            </div>
                          </div>
                          <div className="col-md-3">
                            <label for="cc-cvv" className="form-label">
                              CVV
                            </label>
                            <input
                              type="text"
                              className="form-control"
                              id="cc-cvv"
                              placeholder=""
                              required
                            />
                            <div className="invalid-feedback">
                              Security code required
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                    <hr className="my-4" />

                    <button
                      className="w-100 btn btn-primary btn-lg mb-5"
                      type="submit"
                    >
                      Continue to checkout
                    </button>
                  </form>
                </div>
              </div>
            </main>
          )}
        </div>
      ) : (
        <>
          {submit ? (
            <WhenSubmit
              products={products}
              total={total}
              userId={userId}
              values={formik.values}
              cash={checkedCash}
              delivery={chooseDelivery}
              date={date}
              sameShipping={sameShipping}
            />
          ) : (
            <EmptyCart />
          )}
        </>
      )}
    </div>
  );
}

